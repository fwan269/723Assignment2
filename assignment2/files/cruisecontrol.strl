% Authors: Iain J Ross
%          Fangping Wang
%          Tai Martinez Grant
% Release date: 24 MAy 2011
% Version-2
% esterel crusie controler designed for different states
% 
  
 %module for the unit controller 
  module UnitControl:

  %initialize the type cruisestate with constants
  type CruiseState;
  constant OFF: CruiseState;
  constant ON: CruiseState;
  constant STDBY: CruiseState;
  constant DISABLE: CruiseState;
  constant init = OFF: CruiseState;

%initialize the input variables
  input On;
  input Off;
  input Resume;
  input Set;
  input QuickDecel;
  input QuickAccel;
  input Accel: float;
  input Brake: float;
  input Speed: float;

%initialize the output variables
  output CruiseSpeed: float;
  output ThrottleCmd: float;
  output CruiseState: CruiseState;


%constants to limit the speed and accelerations
  constant SPEED_MIN: float;
  constant SPEED_MAX: float;
  constant SPEED_INC: float;
  constant SPEED_INT: float;

% function to run the regulate throttle in cruisecontrol.c
  function regulateThrottle(integer, float, float): float;
  function isPressed(float): boolean;

% function to run the regulate throttle in cruisecontrol.c
  var 
    currentState := init: CruiseState,
    cruiseSpd:= SPEED_INT:float,
    lastCruiseSpd:= SPEED_INT: float,
    isGoingOn := 0: integer
  in 

  % loops through the different states for the cruise controller
  loop
    pause;
    trap STEP_TRANSITION in

%if state of check if the pedel is pressed and on button not presed
      if currentState = OFF then
       present Accel then
          if isPressed(?Accel) then
            currentState := DISABLE;
            isGoingOn := 0;
            emit CruiseState(currentState);
            exit STEP_TRANSITION;
          end
       end;

       present Brake then
          if isPressed(?Brake) then
            currentState := STDBY;
            emit CruiseState(currentState);
            exit STEP_TRANSITION;
          end
        end;

%if on is presed jump to on and update the cruise speed with speed given
        present On then
          present Speed then
            cruiseSpd := ?Speed;
            lastCruiseSpd := cruiseSpd;
            currentState := ON;
            isGoingOn := 1;
            emit CruiseState(currentState);
            emit CruiseSpeed(cruiseSpd);
            emit ThrottleCmd(regulateThrottle(isGoingOn, cruiseSpd, ?Speed));
            exit STEP_TRANSITION;
          end
        end
      end;

%if state is on run this code
      if currentState = ON then

      %for off button present state 
        present Off then
          currentState := OFF;
          emit CruiseState(currentState);
          exit STEP_TRANSITION;
        end;

%if accel pedel is pressed
       present Accel then
          if isPressed(?Accel) then
            currentState := DISABLE;
            emit CruiseState(currentState);
            exit STEP_TRANSITION;
          end
       end;

%if brake is pressed
       present Brake then
          if isPressed(?Brake) then
            currentState := STDBY;
            emit CruiseState(currentState);
            exit STEP_TRANSITION;
          end
        end;

%set speed to within boundry
        present Set then
          if ?Speed < SPEED_MIN then
          cruiseSpd := SPEED_MIN;
          else if ?Speed > SPEED_MAX then
          cruiseSpd := SPEED_MAX;
          else
          cruiseSpd := ?Speed;
          end
        end
        end;

%if quick accel is pressed
        present QuickAccel then
          cruiseSpd := cruiseSpd + SPEED_INC;
          if cruiseSpd > SPEED_MAX then
            currentState := DISABLE;
            exit STEP_TRANSITION;
          end
        end;

        present QuickDecel then
          cruiseSpd := cruiseSpd - SPEED_INC;
          if cruiseSpd < SPEED_MIN then
            currentState := DISABLE;
            exit STEP_TRANSITION;
          end
        end;


%if speed was selected
        present Speed then
          isGoingOn := 1;
          cruiseSpd := lastCruiseSpd;
          emit ThrottleCmd(regulateThrottle(isGoingOn, cruiseSpd, ?Speed));
          emit CruiseSpeed(?Speed);
        end;

        isGoingOn := 0;
        emit CruiseState(currentState);
        exit STEP_TRANSITION;
      end;

% if stdy is selected
      if currentState = STDBY then

      %if off return to off
        present Off then
          currentState := OFF;
          exit STEP_TRANSITION;
        end;

%if resume return to the last cruise speed and enter disable
        present Resume then
          if isPressed(?Accel) or not (?Speed > SPEED_MIN and ?Speed < SPEED_MAX) then
            currentState := DISABLE;
          else
            currentState := ON;
            cruiseSpd := lastCruiseSpd;
          end;
          exit STEP_TRANSITION;
        end
      end;

%if desable check if speed is within bounds if so go to on
      if currentState = DISABLE then
         if (?Speed > SPEED_MIN and ?Speed < SPEED_MAX) then
           currentState := ON;
           isGoingOn := 0;
           lastCruiseSpd := ?Speed;
           emit ThrottleCmd(regulateThrottle(isGoingOn, ?Accel, ?Speed));
           emit CruiseState(currentState);
           emit CruiseSpeed(cruiseSpd);
           exit STEP_TRANSITION;

%if not go to off and update accel
         else if isPressed(?Accel) then
           currentState := OFF;
           isGoingOn := 0;
           cruiseSpd := lastCruiseSpd;
           emit CruiseState(currentState);
           emit ThrottleCmd(regulateThrottle(0, ?Accel, ?Speed));
           emit CruiseSpeed(cruiseSpd);
           exit STEP_TRANSITION;
          end;
       end;
       isGoingOn := 0;
      end;

      emit CruiseState(currentState);
      emit CruiseSpeed(cruiseSpd);
      emit ThrottleCmd(regulateThrottle(isGoingOn, cruiseSpd, ?Speed));
    end trap;
  end loop;
  end var;
  end module


  % Top level module that runs the two modules in parallel
  module CruiseControl:
  type CruiseState;

  % interface

  input On;
  input Off;
  input Resume;
  input Set;
  input QuickDecel;
  input QuickAccel;
  input Accel: float;   % Accelerator pedal sensor
  input Brake: float;   % Brake pedal sensor
  input Speed: float;   % Vehicle speed

  output CruiseSpeed: float;
  output ThrottleCmd: float;
  output CruiseState: CruiseState;

%collectes signel and sends to simulation
  run UnitControl[ signal On/On;
                  signal Off/Off;
                  signal Resume/Resume;
                    signal Set/Set;
                    signal QuickDecel/QuickDecel;
                    signal QuickAccel/QuickAccel;
                    signal Accel/Accel;
                    signal Brake/Brake;
                    signal Speed/Speed;
                    signal CruiseSpeed/CruiseSpeed;
                    signal ThrottleCmd/ThrottleCmd;
                    signal CruiseState/CruiseState]

  end module


