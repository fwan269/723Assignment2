
% Cruise Control design in Esterel

% Cruise control specification using PI control
% Cruise control has two concurrent modules - a UnitControl module that moves the car
% and a RequestResolver module that takes in the user requests and passes a single request to the UnitControl module

% This module controls the operation of the cruise control
% It essentially encodes an FSM
% It also handshakes with Request resolver to read a request

module UnitControl:
type CruiseState;
constant OFF: CruiseState;
constant ON: CruiseState;
constant STDBY: CruiseState;
constant DISABLE: CruiseState;
% Interface declarations

input On;
input Off;
input Resume;
input Set;
input QuickDecel;
input QuickAccel;
input Accel: float;   % Accelerator pedal sensor
input Brake: float;   % Brake pedal sensor
input Speed: float;   % Vehicle speed

output CruiseSpeed: float;
output ThrottleCmd: float;
output CruiseState: CruiseState;

constant SPEED_MIN: float;
constant SPEED_MAX: float;
constant SPEED_INC: float;

function regulateThrottle(boolean,float,float):float;
function isPressed(float): boolean;


var
  currentState: CruiseState,
  cruiseSpd: float,
  lastCruiseSpd: float,
  isGoingOn: boolean
in
loop
  pause;
  trap STEP_TRANSITION in
   if currentState = OFF then
    present On then
     present Speed then
      cruiseSpd := ?Speed;
      emit CruiseSpeed(cruiseSpd);
      lastCruiseSpd := cruiseSpd;
      currentState := ON;
      isGoingOn := true;
      exit STEP_TRANSITION;
      end
    end
  end

  if currentState = ON then
    present Off then
      currentState := OFF,
      emit CruiseState(currentState),
      exit STEP_TRANSITION,
    end

    present Brake then
      if isPressed(?brake) then
        currentState := STDBY;
        exit STEP_TRANSITION;
      end

    present Accel then
      if isPressed(?accel) then
        currentState := DISABLE;
        exit STEP_TRANSITION;
      end
    end

    present set then
      cruiseSpd := min(max(?speed, SPEED_MIN), SPEED_MAX);
    end

    present quickAccel then
      cruiseSpd := cruiseSpd + SPEED_INC;
      if cruiseSpd > SPEED_MAX then
        currentState := DISABLE;
        exit STEP_TRANSITION;
      end
    end

    present quickDecel do
        cruiseSpd := cruiseSpd - SPEED_INC;
        if cruiseSpd < SPEED_MIN then
          currentState := DISABLE;
          exit STEP_TRANSITION;
        end
    end

    present Speed then
        emit ThrottleCmd(call regulateThrottle(isGoingOn, cruiseSpd, ?Speed));
    end;

     
      isGoingOn := false;
      exit STEP_TRANSITION;
      emit CruiseState(currentState);
  end

  if currentState = STDBY then
      present off do
        currentState := OFF;
        exit STEP_TRANSITION;

      present resume do
        if isPressed(?accel) or not (?speed > SPEED_MIN and ?speed < SPEED_MAX) then
          currentState := DISABLE;
        else
          currentState := ON;
          cruiseSpd := lastCruiseSpd;
        end
        exit STEP_TRANSITION;
      end
    end

    if currentState = DISABLE then
      present off do
        currentState := OFF;
        exit STEP_TRANSITION;
      end

      if not isPressed(?accel) and (?speed > SPEED_MIN and ?speed < SPEED_MAX) then
        currentState := ON;
        cruiseSpd := lastCruiseSpd;
        exit STEP_TRANSITION;
      end
    end
  end trap

  emit cruiseState(currentState);
  emit cruiseSpeed(cruiseSpd);

end loop
end var
end module

% Top level module that runs the two modules in parallel
module CruiseControl:
type CruiseState;

% interface

input On;
input Off;
input Resume;
input Set;
input QuickDecel;
input QuickAccel;
input Accel: float;   % Accelerator pedal sensor
input Brake: float;   % Brake pedal sensor
input Speed: float;   % Vehicle speed

output CruiseSpeed: float;
output ThrottleCmd: float;
output CruiseState: CruiseState;

run UnitControl[ signal On/On;
                 signal Off/Off;
                 signal Resume/Resume;
                  signal Set/Set;
                  signal QuickDecel/QuickDecel;
                  signal QuickAccel/QuickAccel;
                  signal Accel/Accel;
                  signal Brake/Brake;
                  signal Speed/Speed;
                  signal CruiseSpeed/CruiseSpeed;
                  signal ThrottleCmd/ThrottleCmd;
                  signal CruiseState/CruiseState]

end module
