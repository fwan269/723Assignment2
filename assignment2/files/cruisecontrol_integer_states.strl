module UnitControl:

%type CruiseState;
%constant OFF: CruiseState;
%constant ON: CruiseState;
%constant STDBY: CruiseState;
%constant DISABLE: CruiseState;

input On;
input Off;
input Resume;
input Set;
input QuickDecel;
input QuickAccel;
input Accel: float;
input Brake: float;
input Speed: float;

output CruiseSpeed: float;
output ThrottleCmd: float;
output CruiseState: integer;

constant SPEED_MIN: float;
constant SPEED_MAX: float;
constant SPEED_INC: float;

function regulateThrottle(integer, float, float): float;
function isPressed(float): boolean;

var
  currentState := 0 : integer,
  cruiseSpd: float,
  lastCruiseSpd: float,
  isGoingOn: integer
in
loop
  pause;
  trap STEP_TRANSITION in

    if currentState = 0 then
      present On then
        present Speed then
          cruiseSpd := ?Speed;
          emit CruiseSpeed(cruiseSpd);
          lastCruiseSpd := cruiseSpd;
          currentState := 1;
          isGoingOn := 1;
          exit STEP_TRANSITION;
        end
      end
    end;

    if currentState = 1 then
      present Off then
        currentState := 0;
        emit CruiseState(currentState);
        exit STEP_TRANSITION;
      end;

      present Brake then
        if isPressed(?Brake) then
          currentState := 2;
          emit CruiseState(currentState);
          exit STEP_TRANSITION;
        end
      end;

      present Accel then
        if isPressed(?Accel) then
          currentState := 3;
          emit CruiseState(currentState);
          exit STEP_TRANSITION;
        end
      end;

      present Set then
        if ?Speed < SPEED_MIN then
        cruiseSpd := SPEED_MIN;
        else
        if ?Speed > SPEED_MAX then
        cruiseSpd := SPEED_MAX;
        else
        cruiseSpd := ?Speed;
        end
end
      end;

      present QuickAccel then
        cruiseSpd := cruiseSpd + SPEED_INC;
        if cruiseSpd > SPEED_MAX then
          currentState := 3;
          exit STEP_TRANSITION;
        end
      end;

      present QuickDecel then
        cruiseSpd := cruiseSpd - SPEED_INC;
        if cruiseSpd < SPEED_MIN then
          currentState := 3;
          exit STEP_TRANSITION;
        end
      end;

      present Speed then
        emit ThrottleCmd(regulateThrottle(isGoingOn, cruiseSpd, ?Speed));
      end;

      isGoingOn := 0;
      emit CruiseState(currentState);
      exit STEP_TRANSITION;
    end;

    if currentState = 2 then
      present Off then
        currentState := 0;
        exit STEP_TRANSITION;
      end;

      present Resume then
        if isPressed(?Accel) or not (?Speed > SPEED_MIN and ?Speed < SPEED_MAX) then
          currentState := 3;
        else
          currentState := 1;
          cruiseSpd := lastCruiseSpd;
        end;
        exit STEP_TRANSITION;
      end
    end;

    if currentState = 3 then
      present Off then
        currentState := 0;
        exit STEP_TRANSITION;
      end;

      if not isPressed(?Accel) and (?Speed > SPEED_MIN and ?Speed < SPEED_MAX) then
        currentState := 1;
        cruiseSpd := lastCruiseSpd;
        exit STEP_TRANSITION;
      end
    end;

    emit CruiseState(currentState);
    emit CruiseSpeed(cruiseSpd);
  end trap;
end loop;
end var;
end module


% Top level module that runs the two modules in parallel
module CruiseControl:
%type CruiseState;

% interface

input On;
input Off;
input Resume;
input Set;
input QuickDecel;
input QuickAccel;
input Accel: float;   % Accelerator pedal sensor
input Brake: float;   % Brake pedal sensor
input Speed: float;   % Vehicle speed

output CruiseSpeed: float;
output ThrottleCmd: float;
output CruiseState: integer;

run UnitControl[ signal On/On;
                 signal Off/Off;
                 signal Resume/Resume;
                  signal Set/Set;
                  signal QuickDecel/QuickDecel;
                  signal QuickAccel/QuickAccel;
                  signal Accel/Accel;
                  signal Brake/Brake;
                  signal Speed/Speed;
                  signal CruiseSpeed/CruiseSpeed;
                  signal ThrottleCmd/ThrottleCmd;
                  signal CruiseState/CruiseState]

end module
