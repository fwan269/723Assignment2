%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%TopLevel%
%This module integrates the CruiseStateManager, SpeedRegulator, and ThrottleRegulator modules to manage the cruise control system.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
module TopLevel:

%Inputs%
input On;
input Off;
input Resume;
input Set;
input QuickDecel;
input QuickAccel;
input Accel: float;
input Speed: float;
input Brake: float;

%Outputs%
output CruiseState_Main: integer; % 0:OFF 1:ON 2:STDBY 3:DISABLE %
output CruiseSpeed: float;
output ThrottleCmd: float;

  signal CruiseState : integer in
    [loop
      present CruiseState then
        emit CruiseState_Main(?CruiseState);
      end present;
      pause;
    end loop]
    ||
    run CruiseStateManager [
      signal On/On_CruiseStateManager;
      signal Off/Off_CruiseStateManager;
      signal Resume/Resume_CruiseStateManager;
      signal Accel/Accel_CruiseStateManager;
      signal Speed/Speed_CruiseStateManager;
      signal Brake/Brake_CruiseStateManager;
      signal CruiseState_Main/CruiseState_CruiseStateManager]

    ||
    run SpeedRegulator [
      signal QuickAccel/QuickAccel_SpeedRegulator;
      signal QuickDecel/QuickDecel_SpeedRegulator;
      signal Set/Set_SpeedRegulator;
      signal Speed/Speed_SpeedRegulator;
      signal Accel/Accel_SpeedRegulator;
      signal CruiseState_Main/State_SpeedRegulator;
      signal CruiseSpeed/Speed_SpeedRegulator]
    ||
    run ThrottleRegulator [
      signal CruiseSpeed/CruiseSpeed_ThrottleRegulator;
      signal Speed/Speed_ThrottleRegulator;
      signal CruiseState_Main/CruiseState_ThrottleRegulator;
      signal Accel/Accel_ThrottleRegulator;
      signal ThrottleCmd/Throttle_ThrottleRegulator]

  end signal;
end module

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%CruiseStateManager%
%This module manages the state of the cruise control system, transitioning between OFF, ON, STDBY, and DISABLE states based on inputs.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
module CruiseStateManager:

%Constants%
constant PedalsMin : float;
constant PedalsMax : float;
constant SpeedMax : float;
constant SpeedMin : float;

%INPUTS%
input On_CruiseStateManager;
input Off_CruiseStateManager;
input Resume_CruiseStateManager;
input Accel_CruiseStateManager: float;
input Speed_CruiseStateManager: float;
input Brake_CruiseStateManager: float;

%OUTPUTS%
output CruiseState_CruiseStateManager: integer; % 0:OFF 1:ON 2:STDBY 3:DISABLE %

  var
    currentState := 0 : integer in
    loop
      emit CruiseState_CruiseStateManager(currentState);
      pause;
      trap T_CRUISESTATE in

        if currentState = 0 then % OFF state
          present On_CruiseStateManager then
            currentState := 1; % Transition to ON state
            exit T_CRUISESTATE;
          end present;
        end if;

        if currentState = 1 then % ON state
          present Off_CruiseStateManager then
            currentState := 0; % Transition to OFF state
            exit T_CRUISESTATE;
          end present;

          if ?Accel_CruiseStateManager > PedalsMin then
            currentState := 3; % Transition to DISABLE state
            exit T_CRUISESTATE;
          end if;

          if ?Brake_CruiseStateManager > PedalsMin then
            currentState := 2; % Transition to STDBY state
            exit T_CRUISESTATE;
          end if;       
        end if;

        if currentState = 2 then % STDBY state
          present Off_CruiseStateManager then
            currentState := 0; % Transition to OFF state
            exit T_CRUISESTATE;
          end present;

          present Resume_CruiseStateManager then
            if (?Accel_CruiseStateManager > PedalsMin) then 
              currentState := 3; % Transition to DISABLE state
            end if; 
            if (?Speed_CruiseStateManager < SpeedMin) then
              currentState := 3; % Transition to DISABLE state
            end if;
            if (?Speed_CruiseStateManager > SpeedMax) then
              currentState := 3; % Transition to DISABLE state
            end if;

            if (?Accel_CruiseStateManager < PedalsMin) and (?Speed_CruiseStateManager > SpeedMin) and (?Speed_CruiseStateManager < SpeedMax) then
              currentState := 1; % Transition to ON state
            end if;

            exit T_CRUISESTATE;
          end present;
        end if;

        if currentState = 3 then % DISABLE state
          present Off_CruiseStateManager then
            currentState := 0; % Transition to off state
            exit T_CRUISESTATE;
          end present;
          if (?Accel_CruiseStateManager < PedalsMin) and (?Speed_CruiseStateManager > SpeedMin) and (?Speed_CruiseStateManager < SpeedMax) then
              currentState := 1; % Transition to ON state
            end if;
        end if;
      end trap;
    end loop;
  end var;
end module

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%SpeedRegulator%
%This module regulates the cruise speed based on quick acceleration, quick deceleration, and set speed inputs.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
module SpeedRegulator:
%Constants%
constant SpeedMin : float;
constant SpeedMax : float;
constant SpeedInc : float;
constant Zero : float;

%INPUTS%
input QuickAccel_SpeedRegulator;
input QuickDecel_SpeedRegulator;
input Set_SpeedRegulator;
input Speed_SpeedRegulator: float;
input Accel_SpeedRegulator: float;
input State_SpeedRegulator: integer; % 0:OFF 1:ON 2:STDBY 3:DISABLE %

%OUTPUTS%
output CruiseSpeed_SpeedRegulator: float;

  var  NewCruiseSpeed := Zero : float in
    loop
      emit CruiseSpeed_SpeedRegulator(NewCruiseSpeed); % Default value
      pause;
      trap T_CRUISESPEED in

        if State_SpeedRegulator = 0 then % OFF state
          NewCruiseSpeed := Zero; % No speed when OFF
          exit T_CRUISESPEED;
        end if;

        if State_SpeedRegulator = 1 then % ON state
          present QuickAccel_SpeedRegulator then
            if NewCruiseSpeed < (SpeedMax - SpeedInc) then
              NewCruiseSpeed := Speed_SpeedRegulator + SpeedInc; % Increase speed quickly
            exit T_CRUISESPEED;
            end if;
          end present;
          present QuickDecel_SpeedRegulator then
            if NewCruiseSpeed > (SpeedMin + SpeedInc) then
              NewCruiseSpeed := Speed_SpeedRegulator - SpeedInc; % Decrease speed quickly
            exit T_CRUISESPEED;
            end if;
          end present;
          present Set_SpeedRegulator then
            NewCruiseSpeed := Speed_SpeedRegulator; % Set to current speed
            exit T_CRUISESPEED;
          end present;
        end if;
      end trap
    end loop
  end var
end module

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%ThrottleRegulator%
%This module regulates the throttle based on the cruise speed and current speed.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
module ThrottleRegulator:
%INPUTS%
input CruiseSpeed_ThrottleRegulator: float;
input Speed_ThrottleRegulator: float;
input State_ThrottleRegulator: integer; % 0:OFF 1:ON 2:STDBY 3:DISABLE %
input Accel_ThrottleRegulator: float;

%OUTPUTS%
output Throttle_ThrottleRegulator: float;

function regulateThrottle(integer, float, float) : float;

  loop
    pause;
      trap T_REGULATETHROTTLE in
        if ?State_ThrottleRegulator = 1 then
          emit Throttle_ThrottleRegulator(?Accel_ThrottleRegulator);
          exit T_REGULATETHROTTLE;
        elsif ((?State_ThrottleRegulator = 2) and (pre(?State_ThrottleRegulator) = 1)) then
          emit Throttle_ThrottleRegulator(regulateThrottle(1, ?CruiseSpeed_ThrottleRegulator, ?Speed_ThrottleRegulator));
          exit T_REGULATETHROTTLE;
        elsif ?State_ThrottleRegulator = 2 then
          emit Throttle_ThrottleRegulator(regulateThrottle(0, ?CruiseSpeed_ThrottleRegulator, ?Speed_ThrottleRegulator));
          exit T_REGULATETHROTTLE;
        else
          emit Throttle_ThrottleRegulator(?Accel_ThrottleRegulator);
          exit T_REGULATETHROTTLE;
        end if;
      end trap
    end loop
end module